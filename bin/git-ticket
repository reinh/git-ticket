#!/usr/bin/env ruby -rubygems
require 'nokogiri'
require 'readline'
require 'commandant'

include Commandant

URL = "http://projects.reductivelabs.com/issues/%d.xml"

trap('INT') { abort "Exiting..."}

def parse_args(args)
  # Flags
  $help        = args.delete('--help')        || args.delete('-h') || args.empty?
  $branch      = args.delete('--branch')      || args.delete('-b')
  $interactive = args.delete('--interactive') || args.delete('-i')
  $delete      = args.delete('--delete')      || args.delete('-d')
  $list        = args.delete('--list')        || args.delete('-l')

  $id  = args.grep(/^\d+$/).first && args.grep(/^\d+$/).first.to_i
end

def existing_branch
  `git branch`.gsub(/^\*?\s+/,'').split(/\n/).grep(/^(?:bug\-)?#{$id}\-/)
end

def assert_id_provided
  abort "Error: ticket number required" unless $id
end

def assert_branch_exists
  assert_id_provided
  abort "Error: no ticket branch for #$id" if existing_branch.empty?
end

command :help do
  puts <<USAGE
Usage: git-ticket [COMMAND] [OPTIONS] [TICKET]

Checkout, create, delete or list ticket branches.

Based on the git workflow described in
  http://reinh.com/blog/2009/03/02/a-git-workflow-for-agile-teams.html

NOTE: Currently designed to work with Redmine only.

Synopsis:
  git ticket <ticket>
  git ticket [-i, --interactive] (-b, --branch) <ticket>
  git ticket (-d, --delete) <ticket>
  git ticket (-l, --list)
  git ticket list
  git ticket branch [-i, --interactive] <ticket>
  git ticket delete <ticket>
  git ticket checkout <ticket>

Aliases:
  br => branch
  co => checkout
  ls => list
  rm => delete

Options:
  -i, --interactive    Interactive mode.
  -b, --branch         Create a new ticket branch.
  -d, --delete         Delete a ticket branch.
  -l, --list           List all ticket branches.
  -h, --help           You're reading it.
USAGE

  exit 0
end

command :list do
  branches = `git branch`.gsub(/^\*?\s+/,'').split(/\n/).grep(/^(?:bug\-)?\d+\-/)
  puts branches.empty? ? "No ticket branches" : branches
  exit 0
end

command :branch do |args|
  parse_args(args)
  assert_id_provided

  doc = Nokogiri::XML(`curl -s #{URL % $id}`)

  ticket = doc.search('issue tracker').first

  abort "Error: no such ticket #$id" unless ticket

  type = ticket['name'].downcase
  title = doc.search('issue subject').first.text.gsub(/\s+/, '-')

  branch_name_root = "#{'bug-' if type=="bug"}#{$id}-"
  branch_name = "#{branch_name_root}#{title}".downcase
  def branch_name.too_long?; length > 50 end


  if $interactive || branch_name.too_long?
    puts "Branch name: #{branch_name}"
    new_branch_name = Readline.readline "New branch name: #{branch_name_root}"
    branch_name = branch_name_root + new_branch_name unless new_branch_name.empty?
  end

  `git checkout -b #{branch_name}`
  exit 0
end

command :delete do |args|
  parse_args(args)
  assert_branch_exists

  puts `git branch -d #{existing_branch}`
  exit 0
end

command :checkout do |args|
  parse_args(args)
  assert_branch_exists

  `git checkout #{existing_branch}`
end

command :main do |args|
  parse_args(args)

  Commandant.run(:help)   if $help
  Commandant.run(:branch) if $branch
  Commandant.run(:list)   if $list
  Commandant.run(:delete) if $delete

  puts "Error: Unknown command #{args.first}"
  puts "Available commands: #{Commandant::COMMANDS.keys.sort_by{|k| k.to_s} * ', '}"
  puts
  Commandant.run(:help)
end

add_alias :br => :branch, :co => :checkout, :ls => :list, :rm => :delete

run
